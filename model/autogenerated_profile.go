// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ProfileQuerySet

// ProfileQuerySet is an queryset type for Profile
type ProfileQuerySet struct {
	db *gorm.DB
}

// NewProfileQuerySet constructs new ProfileQuerySet
func NewProfileQuerySet(db *gorm.DB) ProfileQuerySet {
	return ProfileQuerySet{
		db: db.Model(&Profile{}),
	}
}

func (qs ProfileQuerySet) w(db *gorm.DB) ProfileQuerySet {
	return NewProfileQuerySet(db)
}

// AddressEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) AddressEq(address string) ProfileQuerySet {
	return qs.w(qs.db.Where("address = ?", address))
}

// AddressIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) AddressIn(address ...string) ProfileQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address IN (?)", address))
}

// AddressNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) AddressNe(address string) ProfileQuerySet {
	return qs.w(qs.db.Where("address != ?", address))
}

// AddressNotIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) AddressNotIn(address ...string) ProfileQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address NOT IN (?)", address))
}

// All is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) All(ret *[]Profile) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Profile) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtEq(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtGt(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtGte(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtIsNotNull() ProfileQuerySet {
	return qs.w(qs.db.Where("created_at IS NOT NULL"))
}

// CreatedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtIsNull() ProfileQuerySet {
	return qs.w(qs.db.Where("created_at IS NULL"))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtLt(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtLte(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) CreatedAtNe(createdAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Profile) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) Delete() error {
	return qs.db.Delete(Profile{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Profile{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Profile{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtEq(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtGt(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtGte(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtIsNotNull() ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtIsNull() ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtLt(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtLte(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) DeletedAtNe(deletedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// FirstNameEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) FirstNameEq(firstName string) ProfileQuerySet {
	return qs.w(qs.db.Where("first_name = ?", firstName))
}

// FirstNameIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) FirstNameIn(firstName ...string) ProfileQuerySet {
	if len(firstName) == 0 {
		qs.db.AddError(errors.New("must at least pass one firstName in FirstNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("first_name IN (?)", firstName))
}

// FirstNameNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) FirstNameNe(firstName string) ProfileQuerySet {
	return qs.w(qs.db.Where("first_name != ?", firstName))
}

// FirstNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) FirstNameNotIn(firstName ...string) ProfileQuerySet {
	if len(firstName) == 0 {
		qs.db.AddError(errors.New("must at least pass one firstName in FirstNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("first_name NOT IN (?)", firstName))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) GetUpdater() ProfileUpdater {
	return NewProfileUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDEq(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDGt(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDGte(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDIn(ID ...int64) ProfileQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDLt(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDLte(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDNe(ID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) IDNotIn(ID ...int64) ProfileQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// LastNameEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) LastNameEq(lastName string) ProfileQuerySet {
	return qs.w(qs.db.Where("last_name = ?", lastName))
}

// LastNameIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) LastNameIn(lastName ...string) ProfileQuerySet {
	if len(lastName) == 0 {
		qs.db.AddError(errors.New("must at least pass one lastName in LastNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("last_name IN (?)", lastName))
}

// LastNameNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) LastNameNe(lastName string) ProfileQuerySet {
	return qs.w(qs.db.Where("last_name != ?", lastName))
}

// LastNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) LastNameNotIn(lastName ...string) ProfileQuerySet {
	if len(lastName) == 0 {
		qs.db.AddError(errors.New("must at least pass one lastName in LastNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("last_name NOT IN (?)", lastName))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) Limit(limit int) ProfileQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) Offset(offset int) ProfileQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProfileQuerySet) One(ret *Profile) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderAscByCreatedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderAscByDeletedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderAscByID() ProfileQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderAscByUpdatedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderAscByUserID() ProfileQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderDescByCreatedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderDescByDeletedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderDescByID() ProfileQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderDescByUpdatedAt() ProfileQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) OrderDescByUserID() ProfileQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// SetAddress is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetAddress(address string) ProfileUpdater {
	u.fields[string(ProfileDBSchema.Address)] = address
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetCreatedAt(createdAt *time.Time) ProfileUpdater {
	u.fields[string(ProfileDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetDeletedAt(deletedAt *time.Time) ProfileUpdater {
	u.fields[string(ProfileDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetFirstName is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetFirstName(firstName string) ProfileUpdater {
	u.fields[string(ProfileDBSchema.FirstName)] = firstName
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetID(ID int64) ProfileUpdater {
	u.fields[string(ProfileDBSchema.ID)] = ID
	return u
}

// SetLastName is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetLastName(lastName string) ProfileUpdater {
	u.fields[string(ProfileDBSchema.LastName)] = lastName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetUpdatedAt(updatedAt *time.Time) ProfileUpdater {
	u.fields[string(ProfileDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) SetUserID(userID int64) ProfileUpdater {
	u.fields[string(ProfileDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProfileUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtEq(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtGt(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtGte(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtIsNotNull() ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at IS NOT NULL"))
}

// UpdatedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtIsNull() ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at IS NULL"))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtLt(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtLte(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UpdatedAtNe(updatedAt time.Time) ProfileQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDEq(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDGt(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDGte(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDIn(userID ...int64) ProfileQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDLt(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDLte(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDNe(userID int64) ProfileQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProfileQuerySet) UserIDNotIn(userID ...int64) ProfileQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// ===== END of query set ProfileQuerySet

// ===== BEGIN of Profile modifiers

// ProfileDBSchemaField describes database schema field. It requires for method 'Update'
type ProfileDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProfileDBSchemaField) String() string {
	return string(f)
}

// ProfileDBSchema stores db field names of Profile
var ProfileDBSchema = struct {
	ID        ProfileDBSchemaField
	UserID    ProfileDBSchemaField
	Address   ProfileDBSchemaField
	LastName  ProfileDBSchemaField
	FirstName ProfileDBSchemaField
	CreatedAt ProfileDBSchemaField
	UpdatedAt ProfileDBSchemaField
	DeletedAt ProfileDBSchemaField
}{

	ID:        ProfileDBSchemaField("id"),
	UserID:    ProfileDBSchemaField("user_id"),
	Address:   ProfileDBSchemaField("address"),
	LastName:  ProfileDBSchemaField("last_name"),
	FirstName: ProfileDBSchemaField("first_name"),
	CreatedAt: ProfileDBSchemaField("created_at"),
	UpdatedAt: ProfileDBSchemaField("updated_at"),
	DeletedAt: ProfileDBSchemaField("deleted_at"),
}

// Update updates Profile fields by primary key
// nolint: dupl
func (o *Profile) Update(db *gorm.DB, fields ...ProfileDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"user_id":    o.UserID,
		"address":    o.Address,
		"last_name":  o.LastName,
		"first_name": o.FirstName,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Profile %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProfileUpdater is an Profile updates manager
type ProfileUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProfileUpdater creates new Profile updater
// nolint: dupl
func NewProfileUpdater(db *gorm.DB) ProfileUpdater {
	return ProfileUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Profile{}),
	}
}

// ===== END of Profile modifiers

// ===== END of all query sets
